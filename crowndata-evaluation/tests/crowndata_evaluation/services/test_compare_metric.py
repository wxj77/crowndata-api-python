# import pytest
# from crowndata_evaluation.services.action_consistency.state_similarity_calculator import StateSimilarityCalculator 
# import numpy as np

# @pytest.mark.parametrize(
#     "traj_a, traj_b, similarity_score, cosine_similarity_score",
#     [
#         [
#             [
#                 [
#                     0.383574843,
#                     0.0734695271,
#                     0.551359415,
#                     -2.89342165,
#                     -0.198712066,
#                     0.126990348,
#                 ],
#                 [
#                     0.383757949,
#                     0.0734741762,
#                     0.552553594,
#                     -2.89334679,
#                     -0.201124683,
#                     0.126930386,
#                 ],
#                 [
#                     0.383574843,
#                     0.0734695271,
#                     0.551359415,
#                     -2.89342165,
#                     -0.198712066,
#                     0.126990348,
#                 ],
#                 [
#                     0.383757949,
#                     0.0734741762,
#                     0.552553594,
#                     -2.89334679,
#                     -0.201124683,
#                     0.126930386,
#                 ],
#                 [
#                     0.383574843,
#                     0.0734695271,
#                     0.551359415,
#                     -2.89342165,
#                     -0.198712066,
#                     0.126990348,
#                 ],
#                 [
#                     0.383757949,
#                     0.0734741762,
#                     0.552553594,
#                     -2.89334679,
#                     -0.201124683,
#                     0.126930386,
#                 ],
#             ],
#             [
#                 [
#                     0.383574843,
#                     0.0734695271,
#                     0.551359415,
#                     -2.89342165,
#                     -0.198712066,
#                     0.126990348,
#                 ],
#                 [
#                     0.383757949,
#                     0.0734741762,
#                     0.552553594,
#                     -2.89334679,
#                     -0.201124683,
#                     0.126930386,
#                 ],
#                 [
#                     0.383574843,
#                     0.0734695271,
#                     0.551359415,
#                     -2.89342165,
#                     -0.198712066,
#                     0.126990348,
#                 ],
#                 [
#                     0.383757949,
#                     0.0734741762,
#                     0.552553594,
#                     -2.89334679,
#                     -0.201124683,
#                     0.126930386,
#                 ],
#                 [
#                     0.383574843,
#                     0.0734695271,
#                     0.551359415,
#                     -2.89342165,
#                     -0.198712066,
#                     0.126990348,
#                 ],
#                 [
#                     0.383757949,
#                     0.0734741762,
#                     0.552553594,
#                     -2.89334679,
#                     -0.201124683,
#                     0.126930386,
#                 ],
#             ],
#             1,
#             1,
#         ],
#         [
#             [
#                 [
#                     0.383574843,
#                     0.0734695271,
#                     0.551359415,
#                     -2.89342165,
#                     -0.198712066,
#                     0.126990348,
#                 ],
#                 [
#                     0.383757949,
#                     0.0734741762,
#                     0.552553594,
#                     -2.89334679,
#                     -0.201124683,
#                     0.126930386,
#                 ],
#                 [
#                     0.383574843,
#                     0.0734695271,
#                     0.551359415,
#                     -2.89342165,
#                     -0.198712066,
#                     0.126990348,
#                 ],
#                 [
#                     0.383757949,
#                     0.0734741762,
#                     0.552553594,
#                     -2.89334679,
#                     -0.201124683,
#                     0.126930386,
#                 ],
#                 [
#                     0.383574843,
#                     0.0734695271,
#                     0.551359415,
#                     -2.89342165,
#                     -0.198712066,
#                     0.126990348,
#                 ],
#                 [
#                     0.383757949,
#                     0.0734741762,
#                     0.552553594,
#                     -2.89334679,
#                     -0.201124683,
#                     0.126930386,
#                 ],
#             ],
#             [
#                 [
#                     0.383574843,
#                     0.0734695271,
#                     0.551359415,
#                     -2.89342165,
#                     -0.198712066,
#                     0.126990348,
#                 ],
#                 [
#                     0.383757949,
#                     0.0734741762,
#                     0.552553594,
#                     -2.89334679,
#                     -0.201124683,
#                     0.126930386,
#                 ],
#                 [
#                     0.383574843,
#                     0.0734695271,
#                     0.551359415,
#                     -2.89342165,
#                     -0.198712066,
#                     0.126990348,
#                 ],
#                 [
#                     0.383757949,
#                     0.0734741762,
#                     0.552553594,
#                     -2.89334679,
#                     -0.201124683,
#                     0.126930386,
#                 ],
#                 [
#                     0.383574843,
#                     0.0734695271,
#                     0.551359415,
#                     -2.89342165,
#                     -0.198712066,
#                     0.126990348,
#                 ],
#                 [
#                     0.5,
#                     0.5,
#                     0.5,
#                     0.5,
#                     0.5,
#                     0.5,
#                 ],
#             ],
#             0.764,
#             0.945,
#         ],
#     ],
# )

# def test_dual_state_similarity(
#     traj_a, traj_b, similarity_score, cosine_similarity_score
# ):
#     actual_similarity_score, actual_cosine_similarity_score = dual_state_similarity(
#         traj_a, traj_b
#     )
#     assert actual_similarity_score == pytest.approx(similarity_score, 0.001)
#     assert actual_cosine_similarity_score == pytest.approx(
#         cosine_similarity_score, 0.001
#     )

# @pytest.mark.parametrize(
#     "state_a, state_b, expected_similarity",
#     [
#         (
#             [0.1, 0.2, 0.3, 0.4, 0.5, 0.6],
#             [0.1, 0.2, 0.3, 0.4, 0.5, 0.6],
#             1.0
#         ),
#         (
#             [0.1, 0.2, 0.3, 0.4, 0.5, 0.6],
#             [0.2, 0.3, 0.4, 0.5, 0.6, 0.7],
#             0.9897433186107872  # This value should be calculated or approximated
#         ),
#         (
#             [0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
#             [1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
#             0.0
#         ),
#     ]
# )
# def test_calculate_state_similarity(state_a, state_b, expected_similarity):
#     result = StateSimilarityCalculator(np.array(state_a), np.array(state_b))
#     assert result == pytest.approx(expected_similarity, abs=1e-6)

# # Additional test for invalid input
# def test_calculate_state_similarity_invalid_input():
#     with pytest.raises(ValueError):
#          StateSimilarityCalculator(np.array([0.1, 0.2]), np.array([0.3, 0.4, 0.5]))

# TODO 1: re-write the test
# TODO 2: check the data input format